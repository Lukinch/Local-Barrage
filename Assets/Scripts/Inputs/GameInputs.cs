//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Inputs/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Vehicle"",
            ""id"": ""df5e4536-cd96-4a6f-a801-60c5326c0f4a"",
            ""actions"": [
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""ca144fe7-9589-4100-966d-3953dfdd773c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""70433930-bb80-4804-8cf1-a717ae696d47"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turret Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""60df84a5-e6dc-4bff-a40b-eb8c831ac5ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turret Fire Instant"",
                    ""type"": ""Button"",
                    ""id"": ""41f8282a-3ac7-45d6-97aa-d10113f8bd89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turret Fire Charge"",
                    ""type"": ""Button"",
                    ""id"": ""d93fe252-b366-468e-9f4b-ff71650e55ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=500)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turret Fire Hold"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9288b0cb-19f6-406c-aeab-5afd94c5c0a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=500)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f70025aa-de38-4faf-bebf-3e118ec31b6d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""636d0c65-6bc7-4e0a-a7d3-f86337ead7f3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""c2725168-d387-4065-9dfd-a6102a8e5739"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ae19254-3fd0-421d-aa09-1654298cae89"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c615a047-071f-4975-af0e-ae6cf649067b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ab3bf34f-39a6-4a67-acd1-b46e87b57fd3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6e2b253b-9131-432e-8fe0-b607162dad8d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6faafce1-1ac1-4ef2-9343-2e8c04be0e15"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c25f35d-40de-4ecc-b15c-e7bbde7b0b86"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Turret Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37ee7379-d842-4332-9611-df786a0e73ab"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Turret Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01e6f157-cd15-4ba8-8ec2-2ec27e9f41fb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Turret Fire Instant"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e43025d4-bc3a-4ca4-9e01-97f177d9e2fe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Turret Fire Instant"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d61eee3b-ad50-4d78-b0f8-6ee682380a6f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Turret Fire Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea9ca408-6064-4af8-8d04-517477b1a540"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Turret Fire Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc867654-2d24-4ad4-9518-463a2957da94"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Turret Fire Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fae32cba-54ce-4c0a-8637-98d01d76dbfc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Turret Fire Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Vehicle
        m_Vehicle = asset.FindActionMap("Vehicle", throwIfNotFound: true);
        m_Vehicle_Brake = m_Vehicle.FindAction("Brake", throwIfNotFound: true);
        m_Vehicle_Movement = m_Vehicle.FindAction("Movement", throwIfNotFound: true);
        m_Vehicle_TurretRotation = m_Vehicle.FindAction("Turret Rotation", throwIfNotFound: true);
        m_Vehicle_TurretFireInstant = m_Vehicle.FindAction("Turret Fire Instant", throwIfNotFound: true);
        m_Vehicle_TurretFireCharge = m_Vehicle.FindAction("Turret Fire Charge", throwIfNotFound: true);
        m_Vehicle_TurretFireHold = m_Vehicle.FindAction("Turret Fire Hold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Vehicle
    private readonly InputActionMap m_Vehicle;
    private IVehicleActions m_VehicleActionsCallbackInterface;
    private readonly InputAction m_Vehicle_Brake;
    private readonly InputAction m_Vehicle_Movement;
    private readonly InputAction m_Vehicle_TurretRotation;
    private readonly InputAction m_Vehicle_TurretFireInstant;
    private readonly InputAction m_Vehicle_TurretFireCharge;
    private readonly InputAction m_Vehicle_TurretFireHold;
    public struct VehicleActions
    {
        private @GameInputs m_Wrapper;
        public VehicleActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Brake => m_Wrapper.m_Vehicle_Brake;
        public InputAction @Movement => m_Wrapper.m_Vehicle_Movement;
        public InputAction @TurretRotation => m_Wrapper.m_Vehicle_TurretRotation;
        public InputAction @TurretFireInstant => m_Wrapper.m_Vehicle_TurretFireInstant;
        public InputAction @TurretFireCharge => m_Wrapper.m_Vehicle_TurretFireCharge;
        public InputAction @TurretFireHold => m_Wrapper.m_Vehicle_TurretFireHold;
        public InputActionMap Get() { return m_Wrapper.m_Vehicle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VehicleActions set) { return set.Get(); }
        public void SetCallbacks(IVehicleActions instance)
        {
            if (m_Wrapper.m_VehicleActionsCallbackInterface != null)
            {
                @Brake.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnBrake;
                @Movement.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnMovement;
                @TurretRotation.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretRotation;
                @TurretRotation.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretRotation;
                @TurretRotation.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretRotation;
                @TurretFireInstant.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireInstant;
                @TurretFireInstant.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireInstant;
                @TurretFireInstant.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireInstant;
                @TurretFireCharge.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireCharge;
                @TurretFireCharge.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireCharge;
                @TurretFireCharge.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireCharge;
                @TurretFireHold.started -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireHold;
                @TurretFireHold.performed -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireHold;
                @TurretFireHold.canceled -= m_Wrapper.m_VehicleActionsCallbackInterface.OnTurretFireHold;
            }
            m_Wrapper.m_VehicleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @TurretRotation.started += instance.OnTurretRotation;
                @TurretRotation.performed += instance.OnTurretRotation;
                @TurretRotation.canceled += instance.OnTurretRotation;
                @TurretFireInstant.started += instance.OnTurretFireInstant;
                @TurretFireInstant.performed += instance.OnTurretFireInstant;
                @TurretFireInstant.canceled += instance.OnTurretFireInstant;
                @TurretFireCharge.started += instance.OnTurretFireCharge;
                @TurretFireCharge.performed += instance.OnTurretFireCharge;
                @TurretFireCharge.canceled += instance.OnTurretFireCharge;
                @TurretFireHold.started += instance.OnTurretFireHold;
                @TurretFireHold.performed += instance.OnTurretFireHold;
                @TurretFireHold.canceled += instance.OnTurretFireHold;
            }
        }
    }
    public VehicleActions @Vehicle => new VehicleActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IVehicleActions
    {
        void OnBrake(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnTurretRotation(InputAction.CallbackContext context);
        void OnTurretFireInstant(InputAction.CallbackContext context);
        void OnTurretFireCharge(InputAction.CallbackContext context);
        void OnTurretFireHold(InputAction.CallbackContext context);
    }
}
